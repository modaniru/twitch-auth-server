// Code generated by sqlc. DO NOT EDIT.
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
insert into users (user_id, client_id, reg_date) values ($1, $2, $3) returning users.id
`

type CreateUserParams struct {
	UserID   string
	ClientID string
	RegDate  string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.UserID, arg.ClientID, arg.RegDate)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteUser = `-- name: DeleteUser :exec
delete from users where id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
select id, user_id, client_id, reg_date from users where id = $1 limit 1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ClientID,
		&i.RegDate,
	)
	return i, err
}

const getUserByUserId = `-- name: GetUserByUserId :one
select id, user_id, client_id, reg_date from users where user_id = $1 limit 1
`

func (q *Queries) GetUserByUserId(ctx context.Context, userID string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUserId, userID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ClientID,
		&i.RegDate,
	)
	return i, err
}
